package Mail::ISO2022JP;

use 5.008;
use strict;
use warnings;

our $VERSION = '0.04_01'; # 2003-03-19

use Carp;

use Encode;
use MIME::Base64;

sub new {
	my $class = shift;
	my $self = {};
	bless $self, $class;
	$$self{'sendmail'} = 'sendmail';
	return $self;
}

sub sendmail {
	my $self = shift;
	$$self{'sendmail'} = shift;
	return $self;
}

sub post {
	my ($self) = @_;
	open(MAIL, "| $$self{'sendmail'} -t -i") or croak "Could not use sendmail program.\n";
	print MAIL $$self{'mail'};
	close MAIL;
	return $self;
}

sub output {
	my ($self) = @_;
	return $$self{'mail'};
}

sub date {
	my $self = shift;
	$$self{'time'} = shift;
	return $self;
}

sub iso2022jp {	# Encode (from UTF-8) to ISO-2022-JP
	my ($self, @entities) = @_;
	foreach my $entity (@entities) {
		$$self{$entity} = encode( 'iso-2022-jp', decode('utf8', $$self{$entity}) );
	}
	return $self;
}

sub base64 { # Encode with MIME-Base64 method
	my ($self, @entities) = @_;
	foreach my $entity (@entities) {
		$$self{$entity} = encode_base64($$self{$entity});
		$$self{$entity} =~ s/\n/\n\t/g;
		$$self{$entity} = "=?ISO-2022-JP?B?\n\t" . $$self{$entity} . '?=';
	}
	return $self;
}

sub set {
	my ($self, $entity, $value) = @_;
	$$self{$entity} = $value;
	return $self;
}

sub compose {
	my ($self) = @_;
	
	# Encode with MIME-Base64 method
#	foreach my $entity ($recipient_name, $sender_name, $subject) {
#		$entity = encode_base64($entity);
#		$entity =~ s/\n/\n\t/g;
#		$entity = "=?ISO-2022-JP?B?\n\t" . $entity . '?=';
#	}
	
	my @subject = encoded($$self{'Subject'});
	
	my $mail = <<"EOF";
From: $$self{'From_addr'}
To: $$self{'To_addr'}
Subject: @subject
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-2022-JP
Content-Transfer-Encoding: 7bit

$$self{'Body'}
EOF
return $mail;
#	if ($$self{'time'}) {
#		$$self{'mail'} = "Date: $$self{'time'}\n$$self{'mail'}";
#	}
#	return $self;
}

########################################################################

# RFC2822 describes about a line length
# Max: 998 = 1000 - (CR + LF)
# Rec: 76  = 78   - (CR + LF)
# RFC2047 describes about an encoded-word length
# Max: 75  = 76   - SPACE

sub encoded {
	my ($string) = @_;
	
	$string = decode('utf8', $string);
	
	my @lines = _encoded_word($string);
	
	foreach my $line (@lines) {
		$line = "\n $line";
	}
	$lines[$#lines] = "$lines[$#lines]\n ";
	
	return @lines;
}

# an encoded-word is composed of
# 'charset', 'encoding', 'encoded-text' and delimiters.
# Hence an encoded-text's max length is:
# 75 - ('charset', 'encoding' and delimiters)
#
# charset 'ISO-2022-JP' is 11.
# encoding 'B' is 1.
# delimiters '=?', '?', '?' and '?=' is total 6.
# 75 - (11 + 1 + 6) = 57
# It is said that an encoded-text's max length is 57
# when we use ISO-2022-JP B encoding.

sub _encoded_word {
	my ($string) = @_;
	
	my @words = _encoded_text($string);
	
	foreach my $word (@words) {
		$word = "=?ISO-2022-JP?B?$word?=";
	}
	
	return @words;
}

# Through Base64 encoding, a group of 4 ASCII-6bit characters
# is generated by 3 ASCII-8bit pre-encode characters.
# We can get 14 group of encoded 4 ASCII-6bit characters under
# the encoded-text's 57 characters limit.
# Hence, we may handle max 42 ASCII-8bit characters as
# a pre-encode text.
# So we should split a ISO-2022-JP text that
# each splitted piece's length is within 42
# if it is counted as ASCII-8bit characters.

sub _encoded_text {
	my ($string) = @_;
	
	my @text = _split($string);
	
	foreach my $text (@text) {
		$text = encode_base64($text);
		$text =~ s/\n//g;
	}
	
	return @text;
}

sub _split {
	my ($string) = @_;
	
	my @strings;
	while ($string) {
		(my $piece, $string) = _cut_once($string);
		push(@strings, $piece);
	}
	
	return @strings;
}

sub _cut_once {
	my ($string) = @_;
	
	my $whole = encode('iso-2022-jp', $string);
	if ( length($whole) <= 42 ) {
		return $whole;
		last;
	}
	
	my $letters = length($string);
	for (my $i = 1; $i <= $letters; $i++) {
		my $temp = substr($string, 0, $i);
		$temp = encode('iso-2022-jp', $temp);
		if (length($temp) > 42) {
			my $piece = substr($string, 0, $i - 1);
			$piece = encode('iso-2022-jp', $piece);
			my $rest  = substr($string, $i - 1);
			return ($piece, $rest);
			last;
		}
	}
}

1;
__END__

=head1 NAME

Mail::ISO2022JP - compose ISO-2022-JP encoded email

=head1 SYNOPSIS

  use Mail::ISO2022JP;
  
  $mail = Mail::ISO2022JP->new;
  $mail->set('From_addr', 'taro@cpan.tld');
  $mail->set('To_addr'  , 'sakura@cpan.tld, yuri@cpan.tld');
  # mail subject containing Japanese characters.
  $mail->set('Subject'  , '日本語で書かれた題名');
  # mail bocy    containing Japanese characters.
  $mail->set('Body'     , '日本語で書かれた本文。');
  # convert body to ISO-2022-JP (from UTF-8)
  $mail->iso2022jp('Body');
  # output the composed mail
  print $mail->compose;

=head1 DESCRIPTION

This module is mainly for Japanese perl programmers. Because of its 7bit/US-ASCII character based regulation, an internet mail is required to compose through some encoding process when it includes non-7bit/US-ASCII characters. ISO-2022-JP is one of Japanese character encoding, which is usually used among Japanese people for the mail encoding. For ISO-2022-JP is 7bit encoding, to use it in mail message body has no problem. But it still has problem to use ISO-2022-JP in mail headers, since mail headers should be expressed only in US-ASCII characters. Then we should encode ISO-2022-JP header data (ex. sender name, recipient name, subject) again with MIME Base64 method. This module automates those kinds of operations.

=head1 METHODS

=over

=item new()

Creates a new object.

=item set('From_addr', $address)

To set originator address. $address should be valid as email address.

=item set('To_addr', $address)

To set destination address. $address should be valid as email address. Comma separated multiple destination addresses are also usable.

=item set('Subject', $subject)

To set mail subject. $subject can contain Japanese characters. Note that this module runs under Unicode/UTF-8 environment, you should input these data in UTF-8 character encoding.

=item set('Body', $body)

To set mail body. $body can contain Japanese characters. Note that this module runs under Unicode/UTF-8 environment, you should input these data in UTF-8 character encoding.

=item iso2022jp('Body')

Converts mail body (which has already been input) into ISO-2022-JP encoding (from UTF-8).

=item compose

Compose and output a formed email.

=item date($date_string)

Specifies mail origination date. This method must used before compose() method when you want to specify this value. Of course, date-time format should be compliant to the format of RFC2822 specification. It is like blow:
     
 Mon, 10 Mar 2003 18:48:06 +0900

Origination date is not a essential information for email (sendmail program will add automatically on posting). Don't forget to quote the string.

=item post() *EXPERIMENTAL*

Posts a mail using sendmail program.
At the default setting, it is supposed that sendmail program's name is `sendmail' under the systems's PATH environmental variable. You can specify exact location with sendmail() method.

=item sendmail($path) *EXPERIMENTAL*

Specifies sendmail location. ex. '/usr/bin/sendmail'

=back

=head1 SEE ALSO

=over

=item L<Encode>

=item L<MIME::Base64>

=item RFC2822: L<http://www.ietf.org/rfc/rfc2822.txt> (Mail)

=item RFC2045: L<http://www.ietf.org/rfc/rfc2045.txt> (MIME)

=item RFC2046: L<http://www.ietf.org/rfc/rfc2046.txt> (MIME)

=item RFC2047: L<http://www.ietf.org/rfc/rfc2047.txt> (MIME)

=back

=head1 NOTES

This module runs under Unicode/UTF-8 environment (then Perl5.8 or later is required), you should input data in UTF-8 character encoding.

Additionally, this POD contains Japanese Unicode/UTF-8 characters. Some characters cannot be displayed correctly without proper fonts and on a pager which cannot handle Unicode/UTF-8.

=head1 TO DO

=over

=item enable originator/destination name containing Japanese characters.

=back

=head1 AUTHOR

Masanori HATA E<lt>lovewing@geocities.co.jpE<gt> (Saitama, JAPAN)

=head1 COPYRIGHT

Copyright (c) 2003 Masanori HATA. All rights reserved.

This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
